generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model submitted {
    id       Int    @id @default(autoincrement())
    type_b   Int    @default(1)
    cid      Int    @default(0)
    team     String
    t_submit Int
    cname    String
    uname    String
    bbq      String
    avatar   String
    url_i    String
}

model blog {
    id            Int    @id @default(autoincrement())
    title         String @db.VarChar(255)
    thumbnail_url String @db.VarChar(255)
    discord_name  String @db.VarChar(255)
    avatar_url    String @db.VarChar(255)
    content       String
    created       Int
    category      String @db.VarChar(255)
}

model bounty {
    id           Int     @id @default(autoincrement())
    title        String  @db.VarChar(255)
    explain      String? @db.VarChar(255)
    solo_point   Int
    multi_point  Int
    solo_ticket  Int
    multi_ticket Int
    cooldown     Int
}

model characters {
    id                   Int                 @id @default(autoincrement())
    user_id              Int
    is_female            Boolean?
    is_new_character     Boolean?
    name                 String?             @db.VarChar(15)
    unk_desc_string      String?             @db.VarChar(31)
    gr                   Int?
    hrp                  Int?
    weapon_type          Int?
    last_login           Int?
    savedata             Bytes?
    decomyset            Bytes?
    hunternavi           Bytes?
    otomoairou           Bytes?
    partner              Bytes?
    platebox             Bytes?
    platedata            Bytes?
    platemyset           Bytes?
    rengokudata          Bytes?
    savemercenary        Bytes?
    restrict_guild_scout Boolean             @default(false)
    minidata             Bytes?
    gacha_trial          Int?
    gacha_prem           Int?
    gacha_items          Bytes?
    daily_time           DateTime?           @db.Timestamp(6)
    frontier_points      Int?
    house_info           Bytes?
    login_boost          Bytes?
    skin_hist            Bytes?
    kouryou_point        Int?
    gcp                  Int?
    guild_post_checked   DateTime            @default(now()) @db.Timestamp(6)
    time_played          Int                 @default(0)
    weapon_id            Int                 @default(0)
    scenariodata         Bytes?
    savefavoritequest    Bytes?
    friends              String              @default("")
    blocked              String              @default("")
    deleted              Boolean             @default(false)
    cafe_time            Int?                @default(0)
    netcafe_points       Int?                @default(0)
    boost_time           DateTime?           @db.Timestamp(6)
    users                users?              @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
    // guild_applications_charactersToguild_applications_actor_id     guild_applications[] @relation("charactersToguild_applications_actor_id")
    // guild_applications_charactersToguild_applications_character_id guild_applications[] @relation("charactersToguild_applications_character_id")
    // guild_characters                                               guild_characters?
    login_boost_state    login_boost_state[]
    // lucky_box_state                                                lucky_box_state[]
    // mail                                                           mail[]
    // shop_item_state                                                shop_item_state[]
    // stepup_state                                                   stepup_state[]
    // guild_characters     guild_characters?   @relation(fields: [guild_charactersId], references: [id])
    // guild_charactersId   Int?
}

model discord {
    id                 Int      @id @default(autoincrement())
    char_id            Int
    discord_id         String   @unique(map: "discord_unique") @db.VarChar(255)
    is_male            Boolean? @default(true)
    bounty             Int?
    road_champion      Boolean  @default(false)
    rain_demolizer     Boolean  @default(false)
    bounty_champion    Boolean  @default(false)
    bounty_master      Boolean  @default(false)
    bounty_expert      Boolean  @default(false)
    gacha              Int      @default(0)
    pity               Int      @default(0)
    boostcd            Int      @default(0)
    newbie             Boolean  @default(true)
    latest_bounty      String?  @db.VarChar(10)
    latest_bounty_time Int      @default(0)
}

model distribution {
    id               Int       @id @default(autoincrement())
    character_id     Int?
    type             Int
    deadline         DateTime? @db.Timestamp(6)
    event_name       String    @default("GM Gift!")
    description      String    @default("~C05You received a gift!")
    times_acceptable Int       @default(1)
    min_hr           Int       @default(65535)
    max_hr           Int       @default(65535)
    min_sr           Int       @default(65535)
    max_sr           Int       @default(65535)
    min_gr           Int       @default(65535)
    max_gr           Int       @default(65535)
    data             Bytes
    bot              Boolean   @default(false)
}

model distributions_accepted {
    distribution_id Int
    character_id    Int

    @@id([character_id, distribution_id])
}

model guild_characters {
    id               Int       @id @default(autoincrement())
    guild_id         Int
    character_id     Int       @unique(map: "guild_character_unique_index")
    joined_at        DateTime? @default(now()) @db.Timestamp(6)
    avoid_leadership Boolean   @default(false)
    order_index      Int       @default(1)
    recruiter        Boolean   @default(false)
    souls            Int?      @default(0)
    // guilds           guilds?   @relation(fields: [guildsId], references: [id])
    // guildsId         Int?
}

model guilds {
    id            Int       @id @default(autoincrement())
    name          String?   @db.VarChar(24)
    created_at    DateTime? @default(now()) @db.Timestamp(6)
    leader_id     Int
    main_motto    Int?      @default(0)
    rank_rp       Int       @default(0)
    comment       String    @default("") @db.VarChar(255)
    icon          Bytes?
    sub_motto     Int?      @default(0)
    item_box      Bytes?
    event_rp      Int       @default(0)
    pugi_name_1   String?   @default("") @db.VarChar(12)
    pugi_name_2   String?   @default("") @db.VarChar(12)
    pugi_name_3   String?   @default("") @db.VarChar(12)
    recruiting    Boolean   @default(true)
    pugi_outfit_1 Int       @default(0)
    pugi_outfit_2 Int       @default(0)
    pugi_outfit_3 Int       @default(0)
    pugi_outfits  Int       @default(0)
    // guild_characters guild_characters[]
}

model login_boost_state {
    char_id    Int
    week_req   Int        @db.SmallInt
    week_count Int        @db.SmallInt
    available  Boolean
    end_time   Int
    ID         Int        @id @default(autoincrement())
    characters characters @relation(fields: [char_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

    @@unique([char_id, week_req], map: "id_week")
}

model normal_shop_items {
    shoptype           Int
    shopid             Int
    itemhash           Int @id @unique
    itemid             Int
    points             Int
    tradequantity      Int
    rankreqlow         Int
    rankreqhigh        Int
    rankreqg           Int
    storelevelreq      Int
    maximumquantity    Int
    boughtquantity     Int
    roadfloorsrequired Int
    weeklyfataliskills Int
}

model rengoku_score {
    character_id  Int  @id
    max_stages_mp Int?
    max_points_mp Int?
    max_stages_sp Int?
    max_points_sp Int?
}

model users {
    id             Int          @id @default(autoincrement())
    username       String       @unique
    password       String
    rights         Int          @default(846)
    item_box       Bytes?
    last_character Int?         @default(0)
    last_login     DateTime?    @db.Timestamp(6)
    return_expires DateTime?    @db.Timestamp(6)
    characters     characters[]
}
